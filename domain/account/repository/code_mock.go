// Code generated by MockGen. DO NOT EDIT.
// Source: code.go
//
// Generated by this command:
//
//	mockgen -source=code.go -destination=code_mock.go -package=repository
//
// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCodeRepository is a mock of CodeRepository interface.
type MockCodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCodeRepositoryMockRecorder
}

// MockCodeRepositoryMockRecorder is the mock recorder for MockCodeRepository.
type MockCodeRepositoryMockRecorder struct {
	mock *MockCodeRepository
}

// NewMockCodeRepository creates a new mock instance.
func NewMockCodeRepository(ctrl *gomock.Controller) *MockCodeRepository {
	mock := &MockCodeRepository{ctrl: ctrl}
	mock.recorder = &MockCodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeRepository) EXPECT() *MockCodeRepositoryMockRecorder {
	return m.recorder
}

// GetCode mocks base method.
func (m *MockCodeRepository) GetCode(codeKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", codeKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockCodeRepositoryMockRecorder) GetCode(codeKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockCodeRepository)(nil).GetCode), codeKey)
}

// SetCode mocks base method.
func (m *MockCodeRepository) SetCode(codeKey, codeValue string, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCode", codeKey, codeValue, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCode indicates an expected call of SetCode.
func (mr *MockCodeRepositoryMockRecorder) SetCode(codeKey, codeValue, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockCodeRepository)(nil).SetCode), codeKey, codeValue, expiration)
}
