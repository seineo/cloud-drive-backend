// Code generated by MockGen. DO NOT EDIT.
// Source: eventStore.go
//
// Generated by this command:
//
//	mockgen -source=eventStore.go -destination=eventStore_mock.go -package=eventbus
//
// Package eventbus is a generated GoMock package.
package eventbus

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventStore is a mock of EventStore interface.
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreMockRecorder
}

// MockEventStoreMockRecorder is the mock recorder for MockEventStore.
type MockEventStoreMockRecorder struct {
	mock *MockEventStore
}

// NewMockEventStore creates a new mock instance.
func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &MockEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStore) EXPECT() *MockEventStoreMockRecorder {
	return m.recorder
}

// GetUnprocessedEvents mocks base method.
func (m *MockEventStore) GetUnconsumedEvents() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnconsumedEvents")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessedEvents indicates an expected call of GetUnprocessedEvents.
func (mr *MockEventStoreMockRecorder) GetUnprocessedEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnconsumedEvents", reflect.TypeOf((*MockEventStore)(nil).GetUnconsumedEvents))
}

// SetEventProcessed mocks base method.
func (m *MockEventStore) SetEventConsumed(eventID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEventConsumed", eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEventProcessed indicates an expected call of SetEventProcessed.
func (mr *MockEventStoreMockRecorder) SetEventProcessed(eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventConsumed", reflect.TypeOf((*MockEventStore)(nil).SetEventConsumed), eventID)
}

// StoreEvent mocks base method.
func (m *MockEventStore) StoreEvent(event Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEvent indicates an expected call of StoreEvent.
func (mr *MockEventStoreMockRecorder) StoreEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEvent", reflect.TypeOf((*MockEventStore)(nil).StoreEvent), event)
}
